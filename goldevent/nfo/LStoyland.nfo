// Automatically generated by GRFCODEC. Do not modify!
// (Info version 7)
// Escapes: 2+ 2- 2< 2> 2u< 2u> 2/ 2% 2u/ 2u% 2* 2& 2| 2^ 2sto = 2s 2rst = 2r 2psto 2ror = 2rot 2cmp 2ucmp 2<< 2u>> 2>>
// Escapes: 71 70 7= 7! 7< 7> 7G 7g 7gG 7GG 7gg 7c 7C
// Escapes: D= = DR D+ = DF D- = DC Du* = DM D* = DnF Du<< = DnC D<< = DO D& D| Du/ D/ Du% D%
// Format: spritenum pcxfile xpos ypos compression ysize xsize xrel yrel
    0 * 4	 7A 00 00 00
    //1 * 14	 0C "@@BEAUTIFY=ON"
    1 * 22	 0C "@@WARNING DISABLE 100"
    2 * 200	 14    //"B" "MASK" \w<length> \b <grf-parameter> [ \b <first-bit> [ \b <num-bit> ] ]
   "CINFO"
    "TNAME" 7F "Novapolis Special Event" 00
    "TDESC" 7F "Event only" 00
		"TURL_" 7F "http://www.novapolis.net/" 00
    "BPALS" \w1 "W"
    "BVRSN" \w4 \d5
    "BMINV" \w4 \d4
    "BNPAR" \w1 \b1
    "CPARAC"
      \d0
        "TNAME" 7F "Start Year" 00
        "TDESC" 7F "Start Year" 00
        "BDFLT" \w4 \d1950
        "BMASK" \w3 \b0 \b0 \b32
        "BTYPE" \w1 00
    00 00 00 00

    3 * 83	 08 07 "JS" 0C 03 "Novapolis Special Event" 00 95 0D
			"GNU GPLv2" 0D
	 		8A "Coded by The Dude" 0D
	 		91 "Version # 2014.02.13" 00

//if not define, set cur year to par0
    4 * 9	 0D 00 80 A4 00 FF FF FF FF

	 	//base cost
    5 * 77	 00 08 01 47 00 08
		08 08 06 00 09 08 06 08 09 08  //10
		08 0A 06 06 08 08 08 08 09 09  //20
		09 09 00 08 08 08 08 08 00 00  //30
		00 00 00 00 08 00 00 00 00 00  //40
		0B 00 0B 0B 0B 0A 0A 0A 0C 08  //50
		08 08 00 00 08 08 08 09 0A 10  //60
		08 08 08 08 08 08 05 05 08 06  //70
		07

    //vehicles
    6 * 4	 01 00 03 08
    7 sprites/trgtr.pcx 450 2136 01 17 8 -3 -10
    8 sprites/trgtr.pcx 466 2136 09 16 22 -14 -6
    9 sprites/trgtr.pcx 498 2136 01 12 28 -14 -6
   10 sprites/trgtr.pcx 546 2136 09 16 20 -4 -8
   11 sprites/trgtr.pcx 578 2136 01 16 8 -3 -9
   12 sprites/trgtr.pcx 594 2136 09 16 20 -14 -7
   13 sprites/trgtr.pcx 626 2136 01 12 28 -14 -6
   14 sprites/trgtr.pcx 674 2136 09 16 22 -6 -7
   15 sprites/trgtr.pcx 210 3512 01 17 8 -3 -10
   16 sprites/trgtr.pcx 226 3512 09 16 22 -14 -6
   17 sprites/trgtr.pcx 258 3512 01 12 28 -14 -6
   18 sprites/trgtr.pcx 306 3512 09 16 20 -4 -8
   19 sprites/trgtr.pcx 338 3512 01 16 8 -3 -9
   20 sprites/trgtr.pcx 354 3512 09 16 20 -14 -7
   21 sprites/trgtr.pcx 386 3512 01 12 28 -14 -6
   22 sprites/trgtr.pcx 434 3512 09 16 22 -6 -7
   23 sprites/trgtr.pcx 466 3512 01 17 8 -3 -10
   24 sprites/trgtr.pcx 482 3512 09 16 22 -14 -6
   25 sprites/trgtr.pcx 514 3512 01 12 28 -14 -6
   26 sprites/trgtr.pcx 562 3512 09 16 20 -4 -8
   27 sprites/trgtr.pcx 594 3512 01 16 8 -3 -9
   28 sprites/trgtr.pcx 610 3512 09 16 20 -14 -7
   29 sprites/trgtr.pcx 642 3512 01 12 28 -14 -6
   30 sprites/trgtr.pcx 690 3512 09 16 22 -6 -7
   31 * 9	 02 00 00 01 01 00 00 00 00
   32 * 9	 02 00 01 01 01 01 00 01 00
   33 * 9	 02 00 02 01 01 02 00 02 00
   34 * 7	 03 00 01 02 00 00 00
   35 * 7	 03 00 01 03 00 01 00
   36 * 7	 03 00 01 04 00 02 00

    //enable steam locos
   37 * 19	 00 00 06 01 00 1A 00 06 0F 09 \w80 0B \w650 17 \b10 1F \b138             // kirby 1
   38 * 21	 00 00 07 01 02 1A 01 06 0F 09 \w135 0B \w450 17 \b14 1F \b61  12 FD      //ploddyphut 2
   39 * 24	 00 00 08 01 03 1A 03 00 A8 2D 06 0F 09 \w175 0B \w750 17 \b13 1F \b80 12 FD   //powernaut 4
   40 * 24	 00 00 08 01 04 1A 0B 00 37 36 06 0F 09 \w270 0B \w6000 17 \b55 1F \b200 12 FD   //mightymower 8
   41 * 22	 00 00 07 01 07 1A 01 00 90 29 06 0F 09 \w160 0B \w900 17 \b17 1F \b40    //wills 3
   42 * 22	 00 00 07 01 08 1A 06 00 82 30 06 0F 09 \w165 0B \w1800 17 \b23 1F \b119    //chaney 5
   43 * 22	 00 00 07 01 09 1A 05 00 EF 31 06 0F 09 \w220 0B \w650 17 \b28 1F \b28    //ginzu 6
   44 * 22	 00 00 07 01 0A 1A 0A 00 CA 34 06 0F 09 \w200 0B \w3500 17 \b35 1F \b152    //sh8p 7
   45 * 24	 04 00 7F 01 57 "Steam Punk (Steam)" 00
   46 * 28	 00 00 0A 01 57 1A 0C 00 10 38 05 00 06 0F 07 80 19 00 09 \w500 0B \w9000 17 \b118 1F \b80
	//disable other
   47 * 7	 00 00 01 01 01 06 00
   48 * 7	 00 00 01 01 10 06 00
   49 * 7	 00 00 01 01 13 06 00
		//road vehicles, 00, 7, A, 10, 13, 16, 19, 1c, 25, 28, 43
   50 * 64	 00 01 01 3A 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
   51 * 24	 00 01 08 01 00 06 07 15 78 13 3F 18 D0 19 01 07 0C 11 27 0A 60 60 60 70
   52 * 20	 00 01 06 01 07 06 07 15 65 13 8D 18 FF 11 28 0A 67 67 67 68
   53 * 20	 00 01 06 01 0A 06 07 15 64 13 8D 18 F0 11 29 0A 67 67 67 77
   54 * 20	 00 01 06 01 10 06 07 15 63 13 8A 18 F5 11 31 0A 67 67 67 57
   55 * 20	 00 01 06 01 13 06 07 15 60 13 8C 18 FD 11 29 0A 67 67 67 58
   56 * 20	 00 01 06 01 16 06 07 15 69 13 8C 18 F5 11 32 0A 67 67 67 40
   57 * 20	 00 01 06 01 19 06 07 15 61 13 8B 18 F9 11 33 0A 67 67 67 60
   58 * 20	 00 01 06 01 1C 06 07 15 60 13 8C 18 FE 11 35 0A 67 67 67 61
   59 * 20	 00 01 06 01 25 06 07 15 4B 13 7C 18 FA 11 87 0A FF FF FF FF
   60 * 20	 00 01 06 01 28 06 07 15 66 13 8D 18 FC 11 31 0A 67 67 67 65
   61 * 20	 00 01 06 01 2B 06 07 15 65 13 8C 18 F3 11 27 0A 67 67 67 66

   62 * 7	 00 02 01 01 02 0B FF

   63 * 11	 00 03 03 01 00 0B 20 0C FF 0D CC

	//industry chances
   64 * 15	 00 0A 05 01 00 08 00 09 00 17 0B 18 03 0F 33    // Coal mine
   65 * 15	 00 0A 05 01 01 08 01 09 01 17 02 18 00 0F 0C     // Power station
   66 * 15	 00 0A 05 01 03 08 03 09 03 17 04 18 01 0F 32  // Forest
   67 * 15	 00 0A 05 01 04 08 04 09 04 17 02 18 00 0F 0D    // Oil refinery
   68 * 15	 00 0A 05 01 07 08 07 09 07 17 02 18 00 0F 0B    // Printing works
   69 * 15	 00 0A 05 01 09 08 09 09 09 17 07 18 02 0F 30   // Farm (temperate or sub-arctic)
   70 * 15	 00 0A 05 01 0B 08 0B 09 0B 17 08 18 02 0F 31   // Oil wells
   71 * 15	 00 0A 05 01 0D 08 0D 09 0D 17 02 18 00 0F 0A   // Food processing plant
   72 * 15	 00 0A 05 01 0E 08 0E 09 0E 17 01 18 00 0F 11    // Paper mill
   73 * 13	 00 0A 04 01 0F 08 0F 09 0F 17 09 18 10     // Gold mine
   74 * 15	 00 0A 05 01 10 08 10 09 10 17 04 18 00 0F 1C    // Bank (sub-tropical or sub-arctic)


		//pax
   75 * 16	 00 0B 04 01 00  10 04  11 12  12 00 01 00 00  1A 01
		//gold
   76 * 21	 00 0B 06 01 0A  10 \b8 11 \b22  12 \d5802  18 05  19 FF 64  1A 01

	//farm
   77 * 10	 00 0A 01 01 09  1A 01 00 00 00
	//bank
   78 * 9	 00 0A 01 01 10  16 90 FF FF
   //gold mine
   79 * 29	 00 0A 09 01 0F  08 0F  09 0F  0F FF  12 00  21 4C  22 04  0B 04  11 00 FF FF FF  1C 80 00 00 00

   80 * 94	 00 09 04 11 48
			08 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58
 			09 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58
 			0A 00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08  00 08
			0E 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04

   81 * 22	 04 0A FF 01 22 D0 C3 9E 98 " (" EE 81 BE " " 8F "max" 98 ")" 00    //*** 8F gren 98-black
   82 * 22	 04 0A FF 01 23 D0 C3 9E 98 " (" EE 81 BE " " 8B "max" 98 ")" 00    //red

//pax payment    do: ((10 - time) << 5), max(min(res, 50), -1000)
   83 * 41	 02 0B B0  89  1A 20 \d10  \2- 18 38 FF 00 00 00  \2<< 1A 20 \d5  \2< 1A 20 \d10  \2> 1A 00 \d-1000  00  00 80
   84 * 14	 02 0B B0 81 0C 00 FF  01  B0 00 39 39  00 80
   85 * 7	 03 0B 01 00 00 B0 00


//gold payment, income = result/8192 * amount * cpf;   //var18: ttaadddd -> LE.ddddaatt, tt 1 unit =185 ticks ~= 2,5 days, 1 day ~= 74 ticks
//gold payment, nvar=0 returns callback result
   86 * 150	 02 0B B0 89  18 38 FF 00 00 00  \2- 1A 20 \d5  \2> 1A 20 \d0  \2sto 1A 20 \d0                // max(time - 5, 0), store in TR[0]
			\2- 1A 20 \d20  \2> 1A 20 \d0  \2sto 1A 20 \d1                                                      // max(that - 20, 0) store in TR[1]
			\2- 1A 20 \d40  \2> 1A 20 \d0  \2* 1A 20 \d4  \2sto 1A 20 \d2                                       // max(that - 50, 0) *4 -> store in TR[2]
			\2rst 1A 20 \d255  \2- 7D 00 20 FF FF FF FF  \2- 7D 01 20 FF FF FF FF  \2- 7D 02 20 FF FF FF FF  \2> 1A 20 \d31      // max(255 - TR[0] - TR[1] - TR[2], 31)
			\2* 18 20 FF FF 00 00  \2u>> 1A 20 \d8  \2* 7D 03 20 FF 00 00 00  \2& 1A 00 FF 3F 00 00  00  00 80    // ((that * dist) >> 8) * TR[3] & 3F FF (first 14 bits)

	//negative profit   do: (time - 70) * 5 ->store in TR[0], do: -1 - TR[0] return that
   87 * 56	 02 0B B6 89  18 38 FF 00 00 00  \2- 1A 20 \d70  \2* 1A 20 \d5  \2sto 1A 20 \d0  \2rst 1A 20 \d-1  \2- 7D 00 20 FF 7F 00 00  \2| 1A 00 00 40 00 00  00  00 80

		// do: max(time, 60), if >70 go to negative calc
   88 * 30	 02 0B B5 89  18 38 FF 00 00 00  \2> 1A 00 \d70  01  B0 00 \d0 \d70  B6 00

	//delivery multiplier, year based, store in TR[3]
   89 * 30	 02 0B B1 89  1A 20 \d2  \2sto 1A 00 \d3  01  B0 00 \d0 \d0  B0 00
   90 * 30	 02 0B B2 89  1A 20 \d3  \2sto 1A 00 \d3  01  B0 00 \d0 \d0  B0 00
   91 * 30	 02 0B B3 89  1A 20 \d8  \2sto 1A 00 \d3  01  B5 00 \d0 \d0  B5 00
   92 * 30	 02 0B B4 89  1A 20 \d19  \2sto 1A 00 \d3  01  B5 00 \d0 \d0  B5 00


//do: current year - start year from par0
   93 * 51	 02 0B B0 89 24 20 FF FF FF FF  \2- 7F 00 00 FF FF FF FF  03
			B1 00 \d0 \d2
			B2 00 \d3 \d5
			B3 00 \d6 \d8
			B4 00
   94 * 14	 02 0B B0 81 0C 00 FF  01  B0 00 39 39  00 80
   95 * 7	 03 0B 01 0A 00 B0 00

//gold mine tile production control
   96 * 33	 0C "decide industry tiles acceptance"
		//check PR[1]
   97 * 15	 02 09 90 82 7C 01 00 FF  01  08 80 00 00  00 80
   98 * 14	 02 09 90 81 0C 00 FF  01  90 00 2B 2B  00 80
   99 * 23	 03 09 11 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58  00  90 00

//7C - PSTO, 7D - TSTO, 7F - parameter
//industry acceptance
//PR[0] = WAITING CARGO
//PR[1] = >0-DISABLE ACCEPT, 0-ENABLE ACCEPT
//PR[2] = MAX ACCEPT
//-PR[3] = 
//-PR[4] = 
//PR[5] = YEAR DIFF (CURRENT - START)
//PR[6] = SUBSTRACT
//PR[7] = ADD

//GOLD MINE
  100 * 84	 0C "production callback called every 256 ticks (3.5 days, day=74 ticks), 8,5x per month"
   //prodcall loaded from TR
  101 * 10	 02 0A AD 01  06 08 08  07 08  08

  // SUBSTRACT = waiting / 8, ADD = SUBSTRACT >> 1
	//do: waiting cargo >> 3 -> store in TR[6] >> 1  -> store in TR[7], set 0 to TR[8] (def value for prod call)

  102 * 65	 02 0A AF 89  40 20 FF FF 00 00  \2u>> 1A 20 \d3  \2sto 1A 20 \d6  \2u>> 1A 20 \d1  \2sto 1A 20 \d7  \2rst 1A 20 \d0  \2sto 1A 00 \d8  01  AD 00 \d0 \d0  AD 00

		//do: waiting cargo -> store in PR[0] / PR[2] -> store in PR[1]
  103 * 45	 02 0A 1A 89 40 20 FF FF 00 00  \2psto 1A 20 \d0  \2u/ 7C 02 20 FF FF FF FF  \2psto 1A 00 \d1  01  AF 00 \d0 \d0  AF 00

	//decide max acceptance, store in PR[2]
  104 * 30	 02 0A 10 89 1A 20 \d50  \2psto 1A 00 \d2     01  1A 00 \d0 \d0 1A 00
  105 * 30	 02 0A 11 89 1A 20 \d150  \2psto 1A 00 \d2    01  1A 00 \d0 \d0 1A 00
  106 * 30	 02 0A 12 89 1A 20 \d250  \2psto 1A 00 \d2    01  1A 00 \d0 \d0 1A 00
  107 * 30	 02 0A 13 89 1A 20 \d450  \2psto 1A 00 \d2    01  1A 00 \d0 \d0 1A 00
  108 * 30	 02 0A 14 89 1A 20 \d10000  \2psto 1A 00 \d2  01  1A 00 \d0 \d0 1A 00

	//do: year - {parameter [0] (start year)} -> store in PR[5]
  109 * 68	 02 0A AF 89 24 20 FF FF FF FF  \2- 7F 00 20 FF FF FF FF  \2psto 1A 00 \d5  04
		10 00 \d0 \d2  //3
    11 00 \d3 \d5  //3
    12 00 \d6 \d7  //2
    13 00 \d8 \d9  //2
    14 00          //2

  110 * 17	 0C "Cargo acceptance" //check PR[1]
  111 * 15	 02 0A A0 81 7C 01 00 FF  01  01 80 00 00  00 80

  112 * 14	 0C "cargo subtext" 
  113 * 47	 02 0A A1 89 7C 02 20 FF FF 00 00  \2+ 7C 01 20 FF FF FF FF  \2sto 1A 20 \dx100  \2rst 7C 01 00 FF FF FF FF  01  22 80 \d0 \d0  23 80
  114 * 17	 02 0A A1 85 18 00 FF FF 01 A1 00 00 01 00 01 FF 80

  115 * 18	 0C "Industry location"
  116 * 34	 04 0A FF 01 20 D0 "Can't be built near a town!" 00
  117 * 37	 04 0A FF 01 21 D0 "Too near to the same industry!" 00

  118 * 15	 02 0A C0 81  64 8F 00 FF  01  21 80  \b0 \b20  00 84 //same industry
  119 * 18	 02 0A C0 85  65 00 00 FF FF  01  20 80 \w0 \w48  C0 00  //town range

  120 * 20	 0C "gold mine callbacks"

  121 * 22	 02 0A A0 81 0C 00 FF  03  A1 00 37 37  A0 00 3D 3D  C0 00 28 28  AF 00
  122 * 7	 03 0A 01 0F 00 A0 00
