disable_item(FEAT_INDUSTRIES, 2);
disable_item(FEAT_INDUSTRIES, 5);
disable_item(FEAT_INDUSTRIES, 16);
disable_item(FEAT_INDUSTRIES, 22);
disable_item(FEAT_INDUSTRIES, 23);
disable_item(FEAT_INDUSTRIES, 25);
disable_item(FEAT_INDUSTRIES, 28);
disable_item(FEAT_INDUSTRIES, 30);
disable_item(FEAT_INDUSTRIES, 32);

/*
registers
0x00  substract1
0x01  substract2
0x02  substract3
0x03  add1
0x05  min substract of all input
*/
/*
1045  1826  371
999   1780  325
46    46    46

*/
produce(produce_level_any, LOAD_TEMP(0x00), LOAD_TEMP(0x01), LOAD_TEMP(0x02), LOAD_TEMP(0x03), 0, 0);

//produce none, decrease waiting by 32x, and produce none
switch(FEAT_INDUSTRIES, SELF, produce_none,
	[STORE_TEMP(waiting_cargo_1 >> 5, 0x00), STORE_TEMP(waiting_cargo_2 >> 5, 0x01), STORE_TEMP(waiting_cargo_3 >> 5, 0x02), STORE_TEMP(0, 0x03)]
){
	produce_level_any;
}

//level2
switch(FEAT_INDUSTRIES, SELF, produce_level2_ok, //produce max(waiting/16, waiting), cap to 1024 and store
	[STORE_TEMP(min(min(max(LOAD_TEMP(0x00) >> 4, 16), LOAD_TEMP(0x00)), 1024), 0x00), //get substract from all from min waiting and save substract1
	 STORE_TEMP(LOAD_TEMP(0x00), 0x01), //save to substract2
	 STORE_TEMP(LOAD_TEMP(0x00), 0x02), //save to substract3
	 STORE_TEMP(LOAD_TEMP(0x00), 0x03)  //save to add1
	]
){
	produce_level_any;
}

switch(FEAT_INDUSTRIES, SELF, produce_level2,
	[STORE_TEMP(min(min(waiting_cargo_1, waiting_cargo_2), waiting_cargo_3), 0x00)] //get min of all accepted and store it for later
){
	0: produce_none; //if zero produce none
	produce_level2_ok;
}

//level3
switch(FEAT_INDUSTRIES, SELF, produce_level3_ok, //level 3 produces more quicky, 2x faster (/8) than level 2, if supplied
	[STORE_TEMP(min(min(max(LOAD_TEMP(0x00) >> 3, 16), LOAD_TEMP(0x00)), 1024), 0x00), //get substract from all from min waiting and save substract1
	 STORE_TEMP(LOAD_TEMP(0x00), 0x01), //save to substract2
	 STORE_TEMP(LOAD_TEMP(0x00), 0x02), //save to substract3
	 STORE_TEMP(LOAD_TEMP(0x00), 0x03)  //save to add1
	]
){
	produce_level_any;
}

switch(FEAT_INDUSTRIES, SELF, produce_level3,
	[STORE_TEMP(min(min(waiting_cargo_1, waiting_cargo_2), waiting_cargo_3), 0x00)]
){
	0: produce_none;
	produce_level3_ok;
}

//level4
produce(produce_level_4, LOAD_TEMP(0x00), LOAD_TEMP(0x01), 0, LOAD_TEMP(0x03), 0, 0);

switch(FEAT_INDUSTRIES, SELF, produce_none_4, //when unsuplied decays twice faster than previous levels
	[STORE_TEMP(waiting_cargo_1 >> 4, 0x00), STORE_TEMP(waiting_cargo_2 >> 4, 0x01), STORE_TEMP(0, 0x03)]
){
	produce_level_4;
}

switch(FEAT_INDUSTRIES, SELF, produce_level4_ok, //level 4 produces 2x slower than level 2 if supplied
	[STORE_TEMP(min(min(max(LOAD_TEMP(0x00) >> 4, 16), LOAD_TEMP(0x00)), 256), 0x00), //get substract from all from min waiting and save substract1
	 STORE_TEMP(LOAD_TEMP(0x00), 0x01), //save to substract2
	 STORE_TEMP(LOAD_TEMP(0x00) >> 1, 0x03)  //save to add1
	]
){
	produce_level_4;
}

switch(FEAT_INDUSTRIES, SELF, produce_level4,
	[STORE_TEMP(min(waiting_cargo_1, waiting_cargo_2), 0x00)]
){
	0: produce_none_4;
	produce_level4_ok;
}

switch(FEAT_INDUSTRIES, SELF, text_acme_accept,
	[STORE_TEMP(LOAD_PERM(0x00), 0x100)] //, STORE_TEMP(cargotype("HCOW"), 0x101)
){
  return string(STR_INDUSTRY_ACME_ACCEPT);
}


//consume everything stored in previous step
produce(produce_finish_none, [HCOW: LOAD_TEMP(0x00);], [])

//store P: previous value + newly delivered cargo,  store T: newly delivered cargo to wholy consume in production
switch(FEAT_INDUSTRIES, SELF, acme_cargo_arrival,
  [STORE_PERM(LOAD_PERM(0x00) + incoming_cargo_waiting("HCOW"), 0x00), STORE_TEMP(incoming_cargo_waiting("HCOW"), 0x00)]
){
  produce_finish_none;
}


item(FEAT_INDUSTRIES, COAL_MINE, 0){
	property{
		substitute: 0;
		override: 0;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("COAL", 16),
			accept_cargo("PASS", produce_cargo("COAL", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [STEEL_MILL];
		prob_random: 100;
		prob_in_game: 100;
		map_colour: 0x01;
		spec_flags: 0;
		name: string(STR_INDUSTRY_COAL_MINE);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_COAL_MINE));
	}
}

item(FEAT_INDUSTRIES, POWER_STATION, 1){
	property{
		substitute: 1;
		override: 1;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("ENRG", 0),
			accept_cargo("FOOD"),
			accept_cargo("SWET"),
			accept_cargo("FZDR")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FOOD_PROCESSING_PLANT, FIZZY_DRINK_FACTORY, SWEET_FACTORY];
		prob_random: 0;
		prob_in_game: 0;
		map_colour: 0xB8;
		name: string(STR_INDUSTRY_POWER_STATION);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_POWER_STATION));
	}
	graphics{
    produce_256_ticks: produce_level3;
	}
}

item(FEAT_INDUSTRIES, FOREST, 3){
	property{
		substitute: 3;
		override: 3;
		life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("WOOD", 15),
			accept_cargo("PASS", produce_cargo("WOOD", 0.5))
		];
		min_cargo_distr: 30;
		conflicting_ind_types: [FACTORY];
		prob_random: 120;
		prob_in_game: 100;
		map_colour: 0x53;
		name: string(STR_INDUSTRY_FOREST);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FOREST));
	}
}

tilelayout layout_acme {
	0,0: ACME_GRASS;
	0,1: ACME_FIELD;
	0,2: ACME_ALERT;
	0,3: ACME_HAPPY;
	0,4: ACME_HAPPY;
	1,0: ACME_FIELD;
	1,1: ACME_FIELD;
	1,2: ACME_SAD;
	1,3: ACME_FIELD;
	1,4: ACME_FIELD;
	2,0: ACME_23;
	2,1: ACME_23;
	2,2: ACME_SAD;
	2,3: ACME_FIELD;
}

item(FEAT_INDUSTRIES, ACME, 4){
	property{
		substitute: 4;
		override: 4;
		layouts: [layout_acme];
		life_type: IND_LIFE_TYPE_PROCESSING;
		//life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("HCOW", 0),
			accept_cargo("ENRG"),
			accept_cargo("TOYS")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [ACMEACC, POWER_STATION, TOY_FACTORY];
		prob_random: 0;
		prob_in_game: 0;
		map_colour: 0xE8;
		name: string(STR_INDUSTRY_ACME);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_ACME));
	}
	graphics{
    produce_256_ticks: produce_level4;
	}
}

tilelayout layout_finish {
	0,1: ACCACME_67;
	0,2: ACCACME_68;
	1,0: ACCACME_65;
	1,1: ACCACME_64;
	1,2: ACCACME_65;
	2,0: ACCACME_65;
	2,1: ACCACME_175;
	2,2: ACCACME_176;
	3,0: ACCACME_65;
	3,1: ACCACME_178;
	3,2: ACCACME_177;
	3,3: ACCACME_179;
	4,2: ACCACME_180;
	4,3: ACCACME_66;
}

item(FEAT_INDUSTRIES, ACMEACC, 14){
	property{
		substitute: 14;
		override: 14;
		layouts: [layout_finish];
		life_type: IND_LIFE_TYPE_BLACK_HOLE;
		fund_cost_multiplier: 216;
		cargo_types: [
			accept_cargo("HCOW")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [ACME, ACMEACC];
		prob_random: 0;
		prob_in_game: 0;
		map_colour: 0xBF;
		name: string(STR_INDUSTRY_ACMEACC);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_ACMEACC));
	}
	graphics {
		produce_cargo_arrival: acme_cargo_arrival;
		extra_text_industry: text_acme_accept;
	}
}

item(FEAT_INDUSTRIES, FACTORY, 6){
	property{
		substitute: 6;
		override: 6;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("GOOD", 0),
			accept_cargo("WOOD"),
			accept_cargo("RUBR"),
			accept_cargo("CORE")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FOREST, COPPER_ORE_MINE, RUBBER_PLANTATION];
		prob_random: 20;
		prob_in_game: 20;
		map_colour: 0xAE;
		name: string(STR_INDUSTRY_FACTORY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FACTORY));
	}
	graphics{
    produce_256_ticks: produce_level2;
	}
}

item(FEAT_INDUSTRIES, PRINTING_WORKS, 7){
	property{
		substitute: 7;
		override: 7;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("CASH", 0),
			accept_cargo("DIAM"),
			accept_cargo("GOLD"),
			accept_cargo("VALU")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [DIAMOND_MINE, GOLD_MINE, BANK];
		prob_random: 20;
		prob_in_game: 20;
		map_colour: 0xAB;
		name: string(STR_INDUSTRY_PRINTING_WORKS);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_PRINTING_WORKS));
	}
	graphics{
    produce_256_ticks: produce_level2;
	}
}

item(FEAT_INDUSTRIES, STEEL_MILL, 8){
	property{
		substitute: 8;
		override: 8;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("STEL", 0),
			accept_cargo("COAL"),
			accept_cargo("IORE"),
			accept_cargo("OIL_")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [COAL_MINE, IRON_ORE_MINE, OIL_WELLS];
		prob_random: 20;
		prob_in_game: 20;
		map_colour: 0x0A;
		name: string(STR_INDUSTRY_STEEL_MILL);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_STEEL_MILL));
	}
	graphics{
    produce_256_ticks: produce_level2;
	}
}

item(FEAT_INDUSTRIES, FARM, 9){
	property{
		substitute: 9;
		override: 9;
		life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("GRAI", 20),
			accept_cargo("PASS", produce_cargo("GRAI", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FOOD_PROCESSING_PLANT, FARM_ANIMAL];
		prob_random: 80;
		prob_in_game: 80;
		map_colour: 0x30;
		spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY);
		name: string(STR_INDUSTRY_FARM);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FARM));
	}
}

item(FEAT_INDUSTRIES, COPPER_ORE_MINE, 10){
	property{
		substitute: 10;
		override: 10;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("CORE", 15),
			accept_cargo("PASS", produce_cargo("CORE", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FACTORY];
		prob_random: 110;
		prob_in_game: 100;
		map_colour: 0x05;
		name: string(STR_INDUSTRY_COPPER_ORE_MINE);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_COPPER_ORE_MINE));
	}
}

item(FEAT_INDUSTRIES, OIL_WELLS, 11){
	property{
		substitute: 11;
		override: 11;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("OIL_", 15),
			accept_cargo("PASS", produce_cargo("OIL_", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [STEEL_MILL];
		prob_random: 100;
		prob_in_game: 100;
		map_colour: 0x98;
		spec_flags: 0;
		name: string(STR_INDUSTRY_OIL_WELLS);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_OIL_WELLS));
	}
}

item(FEAT_INDUSTRIES, BANK, 12){
	property{
		substitute: 12;
		override: 12;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("VALU", 16),
			accept_cargo("PASS", produce_cargo("VALU", 0.5))
		];
		min_cargo_distr: 10;
		conflicting_ind_types: [PRINTING_WORKS, BANK];
		prob_random: 90;
		prob_in_game: 100;
		map_colour: 0x92;
		spec_flags: bitmask(IND_FLAG_BUILT_NEAR_TOWN);
		name: string(STR_INDUSTRY_BANK);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_BANK));
	}
}

item(FEAT_INDUSTRIES, FOOD_PROCESSING_PLANT, 13){
	property{
		substitute: 13;
		override: 13;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("FOOD", 0),
			accept_cargo("LVST"),
			accept_cargo("GRAI"),
			accept_cargo("FRUT")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FARM, FARM_ANIMAL, FRUIT_PLANTATION];
		prob_random: 20;
		prob_in_game: 20;
		map_colour: 0x3A;
		name: string(STR_INDUSTRY_FOOD_PROCESSING_PLANT);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FOOD_PROCESSING_PLANT));
	}
	graphics{
    produce_256_ticks: produce_level2;
	}
}

item(FEAT_INDUSTRIES, GOLD_MINE, 15){
	property{
		substitute: 15;
		override: 15;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("GOLD", 14),
			accept_cargo("PASS", produce_cargo("GOLD", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [DIAMOND_MINE, PRINTING_WORKS];
		prob_random: 130;
		prob_in_game: 130;
		map_colour: 0xC2;
		name: string(STR_INDUSTRY_GOLD_MINE);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_GOLD_MINE));
	}
}

item(FEAT_INDUSTRIES, DIAMOND_MINE, 17){
	property{
		substitute: 17;
		override: 17;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("DIAM", 14),
			accept_cargo("PASS", produce_cargo("DIAM", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [GOLD_MINE, PRINTING_WORKS];
		prob_random: 125;
		prob_in_game: 125;
		map_colour: 0x2F;
		name: string(STR_INDUSTRY_DIAMOND_MINE);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_DIAMOND_MINE));
	}
}

item(FEAT_INDUSTRIES, IRON_ORE_MINE, 18){
	property{
		substitute: 18;
		override: 18;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("IORE", 15),
			accept_cargo("PASS", produce_cargo("IORE", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [STEEL_MILL];
		prob_random: 110;
		prob_in_game: 100;
		map_colour: 0x37;
		name: string(STR_INDUSTRY_IRON_ORE_MINE);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_IRON_ORE_MINE));
	}
}

item(FEAT_INDUSTRIES, FRUIT_PLANTATION, 19){
	property{
		substitute: 19;
		override: 19;
		life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("FRUT", 16),
			accept_cargo("PASS", produce_cargo("FRUT", 0.5))
		];
		min_cargo_distr: 15;
		conflicting_ind_types: [FOOD_PROCESSING_PLANT];
		prob_random: 110;
		prob_in_game: 100;
		map_colour: 0x57;
		name: string(STR_INDUSTRY_FRUIT_PLANTATION);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FRUIT_PLANTATION));
	}
}

item(FEAT_INDUSTRIES, RUBBER_PLANTATION, 20){
	property{
		substitute: 20;
		override: 20;
		life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("RUBR", 16),
			accept_cargo("PASS", produce_cargo("RUBR", 0.5))
		];
		min_cargo_distr: 15;
		conflicting_ind_types: [FACTORY];
		prob_random: 100;
		prob_in_game: 90;
		map_colour: 0x27;
		name: string(STR_INDUSTRY_RUBBER_PLANTATION);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_RUBBER_PLANTATION));
	}
}

item(FEAT_INDUSTRIES, WATER_SUPPLY, 21){
	property{
		substitute: 21;
		override: 21;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("WATR", 18),
			accept_cargo("PASS", produce_cargo("WATR", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FIZZY_DRINK_FACTORY];
		prob_random: 90;
		prob_in_game: 90;
		map_colour: 0x25;
		name: string(STR_INDUSTRY_WATER_SUPPLY);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_WATER_SUPPLY));
	}
}

item(FEAT_INDUSTRIES, FARM_ANIMAL, 24){
	property{
		substitute: 24;
		override: 24;
		life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("LVST", 18),
			accept_cargo("PASS", produce_cargo("LVST", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FARM, FOOD_PROCESSING_PLANT];
		prob_random: 90;
		prob_in_game: 80;
		map_colour: 0x5D;
		spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY);
		name: string(STR_INDUSTRY_FARM_ANIMAL);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FARM_ANIMAL));
	}
}

item(FEAT_INDUSTRIES, CANDYFLOSS_FOREST, 26){
	property{
		substitute: 26;
		override: 26;
		life_type: IND_LIFE_TYPE_ORGANIC;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("CTCD", 15),
			accept_cargo("PASS", produce_cargo("CTCD", 0.5))
		];
		min_cargo_distr: 30;
		conflicting_ind_types: [SWEET_FACTORY];
		prob_random: 110;
		prob_in_game: 110;
		map_colour: 0xA5;
		name: string(STR_INDUSTRY_CANDYFLOSS_FOREST);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_CANDYFLOSS_FOREST));
	}
}

item(FEAT_INDUSTRIES, SWEET_FACTORY, 27){
	property{
		substitute: 27;
		override: 27;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("SWET", 0),
			accept_cargo("CTCD"),
			accept_cargo("SUGR"),
			accept_cargo("TOFF")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [TOFFEE_QUARRY, SUGAR_MINE, CANDYFLOSS_FOREST];
		prob_random: 20;
		prob_in_game: 20;
		map_colour: 0xBD;
		name: string(STR_INDUSTRY_SWEET_FACTORY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_SWEET_FACTORY));
	}
	graphics{
    produce_256_ticks: produce_level2;
	}
}

item(FEAT_INDUSTRIES, COLA_WELLS, 29){
	property{
		substitute: 29;
		override: 29;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("COLA", 16),
			accept_cargo("PASS", produce_cargo("COLA", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FIZZY_DRINK_FACTORY];
		prob_random: 110;
		prob_in_game: 120;
		map_colour: 0x3C;
		name: string(STR_INDUSTRY_COLA_WELLS);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_COLA_WELLS));
	}
}

item(FEAT_INDUSTRIES, TOY_FACTORY, 31){
	property{
		substitute: 31;
		override: 31;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("TOYS", 0),
			accept_cargo("STEL"),
			accept_cargo("GOOD"),
			accept_cargo("CASH")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [STEEL_MILL, FACTORY, PRINTING_WORKS];
		prob_random: 0;
		prob_in_game: 0;
		map_colour: 0x2C;
		name: string(STR_INDUSTRY_TOY_FACTORY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_TOY_FACTORY));
	}
	graphics{
    produce_256_ticks: produce_level3;
	}
}

item(FEAT_INDUSTRIES, FIZZY_DRINK_FACTORY, 33){
	property{
		substitute: 33;
		override: 33;
		life_type: IND_LIFE_TYPE_PROCESSING;
		fund_cost_multiplier: 57;
		cargo_types: [
			produce_cargo("FZDR", 0),
			accept_cargo("BUBL"),
			accept_cargo("COLA"),
			accept_cargo("WATR")
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [COLA_WELLS, WATER_SUPPLY, BUBBLE_GENERATOR];
		prob_random: 20;
		prob_in_game: 20;
		map_colour: 0xB5;
		name: string(STR_INDUSTRY_FIZZY_DRINK_FACTORY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_FIZZY_DRINK_FACTORY));
	}
	graphics{
    produce_256_ticks: produce_level2;
	}
}

item(FEAT_INDUSTRIES, BUBBLE_GENERATOR, 34){
	property{
		substitute: 34;
		override: 34;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("BUBL", 17),
			accept_cargo("PASS", produce_cargo("BUBL", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [FIZZY_DRINK_FACTORY];
		prob_random: 90;
		prob_in_game: 85;
		map_colour: 0x94;
		name: string(STR_INDUSTRY_BUBBLE_GENERATOR);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_BUBBLE_GENERATOR));
	}
}

item(FEAT_INDUSTRIES, TOFFEE_QUARRY, 35){
	property{
		substitute: 35;
		override: 35;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("TOFF", 15),
			accept_cargo("PASS", produce_cargo("TOFF", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [SWEET_FACTORY];
		prob_random: 100;
		prob_in_game: 100;
		map_colour: 0xBC;
		name: string(STR_INDUSTRY_TOFFEE_QUARRY);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_TOFFEE_QUARRY));
	}
}

item(FEAT_INDUSTRIES, SUGAR_MINE, 36){
	property{
		substitute: 36;
		override: 36;
		life_type: IND_LIFE_TYPE_EXTRACTIVE;
		fund_cost_multiplier: 143;
		cargo_types: [
			produce_cargo("SUGR", 24),
			accept_cargo("PASS", produce_cargo("SUGR", 0.5))
		];
		min_cargo_distr: 5;
		conflicting_ind_types: [SWEET_FACTORY];
		prob_random: 80;
		prob_in_game: 70;
		map_colour: 0x0F;
		name: string(STR_INDUSTRY_SUGAR_MINE);
		prospect_chance: 1;
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_INDUSTRY_SUGAR_MINE));
	}
}